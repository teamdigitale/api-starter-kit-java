package io.swagger.model;

import java.util.Objects;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;


@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaResteasyEapServerCodegen", date = "2018-08-26T10:53:36.522+02:00[Europe/Rome]")
public class Problem   {


	private String detail = null;
	private String instance = null;
	private Integer status = null;
	private String title = null;
	private String type = "about:blank";

	public Problem(String title, Integer status) {
		this.title = title;
		this.status = status;
	}

	/**

	 * A human readable explanation specific to this occurrence of the problem. 



	 **/

	@ApiModelProperty(example = "Connection to database timed out", value = "A human readable explanation specific to this occurrence of the problem. ")
	@JsonProperty("detail")

















	public String getDetail() {
		return detail;
	}
	public void setDetail(String detail) {
		this.detail = detail;
	}


	/**

	 * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. 



	 **/

	@ApiModelProperty(value = "An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. ")
	@JsonProperty("instance")

















	public String getInstance() {
		return instance;
	}
	public void setInstance(String instance) {
		this.instance = instance;
	}


	/**

	 * The HTTP status code generated by the origin server for this occurrence of the problem. 


	 * minimum: 100


	 * maximum: 600

	 **/

	@ApiModelProperty(example = "503", value = "The HTTP status code generated by the origin server for this occurrence of the problem. ")
	@JsonProperty("status")















	@Min(100)


	@Max(600)


	public Integer getStatus() {
		return status;
	}
	public void setStatus(Integer status) {
		this.status = status;
	}


	/**

	 * A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized); example: Service Unavailable 



	 **/

	@ApiModelProperty(value = "A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized); example: Service Unavailable ")
	@JsonProperty("title")

















	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}


	/**

	 * An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). 



	 **/

	@ApiModelProperty(example = "https://tools.ietf.org/html/rfc7231#section-6.6.4", value = "An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). ")
	@JsonProperty("type")

















	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}



	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Problem problem = (Problem) o;
		return Objects.equals(detail, problem.detail) &&
				Objects.equals(instance, problem.instance) &&
				Objects.equals(status, problem.status) &&
				Objects.equals(title, problem.title) &&
				Objects.equals(type, problem.type);
	}

	@Override
	public int hashCode() {
		return Objects.hash(detail, instance, status, title, type);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Problem {\n");

		sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
		sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}




